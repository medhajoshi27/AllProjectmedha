using jqgrid.Models;
using System.Linq;
using System.Web.Mvc;
using Trirand.Web.Mvc;

namespace jqgrid.Controllers
{
    public class HomeController : Controller
    {
        public ActionResult PerformanceLinqSearch()
        {
            // Get the model (setup) of the grid defined in the /Models folder.
            var gridModel = new Customer();
            var ordersGrid = gridModel.CustomersGrid;

            // Setting the DataUrl to an action (method) in the controller is required.
            // This action will return the data needed by the grid
            ordersGrid.DataUrl = Url.Action("PerformanceLinqSearch_DataRequested");

            // customize the default Orders grid model with custom settings
            // NOTE: you need to call this method in the action that fetches the data as well,
            // so that the models match
            SetUpGrid(ordersGrid);

            // Pass the custmomized grid model to the View
            return View(gridModel);
        }

        // This method is called when the grid requests data        
        public JsonResult PerformanceLinqSearch_DataRequested()
        {
            // Get both the grid Model and the data Model
            // The data model in our case is an autogenerated linq2sql database based on Northwind.
            var gridModel = new Customer();
            var custom = new Customercontext();

            // customize the default Orders grid model with our custom settings
            SetUpGrid(gridModel.CustomersGrid);

            JQGridState gridState = gridModel.CustomersGrid.GetState();
            Session["gridState"] = gridState;
            // return the result of the DataBind method, passing the datasource as a parameter
            // jqGrid for ASP.NET MVC automatically takes care of paging, sorting, filtering/searching, etc

            return gridModel.CustomersGrid.DataBind(custom.Orders);
        }

        public JsonResult AutoCompleteShipName(string term)
        {
            var custom = new Customercontext();
            JQAutoComplete autoComplete = new JQAutoComplete();

            autoComplete.DataField = "ShipName";
            autoComplete.AutoCompleteMode = AutoCompleteMode.BeginsWith;
            autoComplete.DataSource = from o in custom.Orders
                                      select o;
            return autoComplete.DataBind();
        }

        private void SetUpGrid(JQGrid ordersGrid)
        {
            // show the search toolbar
            ordersGrid.ToolBarSettings.ShowSearchToolBar = true;
            ordersGrid.ToolBarSettings.ShowSearchButton = true;

            var orderDateColumn = ordersGrid.Columns.Find(c => c.DataField == "Id");


            orderDateColumn.DataType = typeof(int);

            orderDateColumn.SearchToolBarOperation = SearchOperation.IsEqualTo;

            var shipNameColumn = ordersGrid.Columns.Find(c => c.DataField == "Name");
            shipNameColumn.SearchType = SearchType.AutoComplete;
            shipNameColumn.DataType = typeof(string);
            shipNameColumn.SearchControlID = "AutoComplete";
            shipNameColumn.SearchToolBarOperation = SearchOperation.BeginsWith;
            shipNameColumn.ClearSearch = false;

            var orderIDColumns = ordersGrid.Columns.Find(c => c.DataField == "Email");
            orderIDColumns.Searchable = true;
            orderIDColumns.DataType = typeof(string);
            orderIDColumns.SearchToolBarOperation = SearchOperation.IsEqualTo;

            var orderEmailcolumn = ordersGrid.Columns.Find(c => c.DataField == "Email");
            orderIDColumns.Searchable = true;
            orderIDColumns.DataType = typeof(string);
            orderIDColumns.SearchToolBarOperation = SearchOperation.IsEqualTo;

            var orderphonecolumn = ordersGrid.Columns.Find(c => c.DataField == "phone");
            orderIDColumns.Searchable = true;
            orderIDColumns.DataType = typeof(string);
            orderIDColumns.SearchToolBarOperation = SearchOperation.IsEqualTo;


        }


    }
}